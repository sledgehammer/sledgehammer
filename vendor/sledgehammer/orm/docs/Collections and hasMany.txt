
hasMany behaves like an array and should only load data from the database on-access.

(Common) use cases are:
  Adding an object/value to the collection.
  Removing an object/value from the colllection.
  Retrieving a specific object/value
  Looping through all items
  Filter the items
  Sort the items

Approaches
--------------------
1. Use placeholder and replace the placeholder with an array on-access.
  POCO friendly, doesnt have an api other than ArrayAccess.
  Loads all items, even when they aren't accessed (but better performance in the "loop all" scenario?)
  Use only 1 query for all items.
  Uses asort() and array_filter() to sort and filter, but the call only work after the placeholder has been replaced.

For hasMany relations we use Collections as the query generating backend.
The collection will be preconfigured (by the Repository).
The hasMany object will do the (optional) value mapping.

special function to convert the placeholder into an array:
Sledgehammer\replace_placeholder($model->items);
    Or does "reset($model->items);" work?

2. Use a placeholder and replace the placeholder with a collection on-access.
  Add an event-listener to the collection and aid change-detection in the Repository->save()

Collections
------------
* Allow (additional) filtering.
* Are Lazy loaded (are promise to a resultset)
* Allow SQL but that issn't the primary API. (class DatabaseCollection extends Collection)
    $collection->sql = $collection->sql->where('RAND() > 0.5'); // Example of custom SQL

Fluent interface
  Uses the Linq-extension-methods names:     @link http://msdn.microsoft.com/en-us/library/bb383977.aspx
    $sortedCollection = $collection->orderBy('propertyname'); //and orderByDescending()
  Copy implementation from underscore.php
  The fluent interface works different than the SQL interface:
    Collection methods return a new collection without modifing the current instance.
    Changed the SQL class to do the same. See blogpost: http://stackoverflow.com/questions/1103985/method-chaining-why-is-it-a-good-practice-or-not/7215149#7215149

Collections can be used without an repository.
  The collection class must be able to replace the data with an (model)instance OR don't allow additional filtering or sorting (by modifing the SQL object imposible).
  Therefor collections work with repositories based on dependancy injection.
  Injecting which model and reposity with the $collection->bind() method. (alt. bindModel() ? bindRepository() ?)


Todo research
----------------
Can lambda functions be reverse engineerd?
  converting:
    function($model) { return ($model->property == "value"); }
  to
	WHERE property = "value"

Rejected approaches
------------------
 1. Use an array-like object (Tailored for HasMany)
  Almost POCO
  Tempting to write saving logic inside the hasMany class instead of the Repository class
  Complex logic to prevent loading (DatabaseCollections are lazy, but this should not be a requirement for other backend collections)
  Only prevents converting data into objects, because no queries/requests are prevented (compared to placeholder)
  Harder to implement, an array has builtin errors/notices.
  Can support filter and sorting methods.

  Because: Adds complexity with (very) little gain.
    If the filter and sorting methods are needed you can access the Collection directly with $repo->get***Collection()
